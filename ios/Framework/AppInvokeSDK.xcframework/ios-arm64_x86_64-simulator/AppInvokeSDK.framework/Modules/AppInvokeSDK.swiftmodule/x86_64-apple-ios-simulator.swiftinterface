// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 6.0.3 effective-5.10 (swiftlang-6.0.3.1.10 clang-1600.0.30.1)
// swift-module-flags: -target x86_64-apple-ios10.0-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -enable-bare-slash-regex -module-name AppInvokeSDK
// swift-module-flags-ignorable: -no-verify-emitted-module-interface
@_exported import AppInvokeSDK
import DeveloperToolsSupport
import Foundation
import Swift
import SwiftUI
import UIKit
import WebKit
import _Concurrency
import _StringProcessing
import _SwiftConcurrencyShims
@objc(AIDelegate) public protocol AIDelegate : ObjectiveC.NSObjectProtocol {
  @objc func openPaymentWebVC(_ controller: UIKit.UIViewController?)
  @objc func didFinish(with status: AppInvokeSDK.AIPaymentStatus, response: [Swift.String : Any])
}
@objc(AIPaymentStatus) public enum AIPaymentStatus : Swift.Int {
  case success
  case failed
  case pending
  case cancel
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@_inheritsConvenienceInitializers @objc(AIHandler) @_Concurrency.MainActor @preconcurrency public class AIHandler : ObjectiveC.NSObject, UIKit.UIAdaptivePresentationControllerDelegate {
  @objc @_Concurrency.MainActor @preconcurrency public func openPaytm(merchantId: Swift.String, orderId: Swift.String, txnToken: Swift.String, amount: Swift.String, callbackUrl: Swift.String?, delegate: any AppInvokeSDK.AIDelegate, environment: AppInvokeSDK.AIEnvironment, mobileHash: Swift.String? = "", isMobileVerificationRequired: Swift.String? = "false", urlScheme: Swift.String?)
  @objc @_Concurrency.MainActor @preconcurrency public func isUserLoggedIn(merchantId: Swift.String, urlScheme: Swift.String)
  @objc @_Concurrency.MainActor @preconcurrency public func openPaytmSubscription(merchantId: Swift.String, orderId: Swift.String, txnToken: Swift.String, amount: Swift.String, callbackUrl: Swift.String?, delegate: any AppInvokeSDK.AIDelegate, environment: AppInvokeSDK.AIEnvironment, mobileHash: Swift.String? = "", isMobileVerificationRequired: Swift.String? = "false", urlScheme: Swift.String?)
  @objc @_Concurrency.MainActor @preconcurrency public func setBridgeName(name: Swift.String)
  @objc @_Concurrency.MainActor @preconcurrency public func restrictAppInvokeFlow(restrict: Swift.Bool)
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public init()
  @objc deinit
}
extension AppInvokeSDK.AIHandler {
  @objc @_Concurrency.MainActor @preconcurrency dynamic public func sdkVersion() -> Swift.String
}
@objc(AIEnvironment) public enum AIEnvironment : Swift.Int {
  case production
  case staging
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
public let PRODUCTION_PG_DOMAIN: Swift.String
public let STAGING_PG_DOMAIN: Swift.String
public var kStaging_PGServerURL: Swift.String
public var kProduction_PGServerURL: Swift.String
public var kStaging_PGCallbackURL: Swift.String
public var kProduction_PGCallbackURL: Swift.String
public var kStaging_PGtxnStatusURL: Swift.String
public var kProduction_PGtxnStatusURL: Swift.String
extension AppInvokeSDK.AIPaymentStatus : Swift.Equatable {}
extension AppInvokeSDK.AIPaymentStatus : Swift.Hashable {}
extension AppInvokeSDK.AIPaymentStatus : Swift.RawRepresentable {}
extension AppInvokeSDK.AIHandler : Swift.Sendable {}
extension AppInvokeSDK.AIEnvironment : Swift.Equatable {}
extension AppInvokeSDK.AIEnvironment : Swift.Hashable {}
extension AppInvokeSDK.AIEnvironment : Swift.RawRepresentable {}
